# See https://setuptools.readthedocs.io/en/latest/build_meta.html
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "y0"
version = "0.2.12-dev"
description = "Causal inference in Python."
readme = "README.md"
authors = [
    { name = "Charles Tapley Hoyt", email = "cthoyt@gmail.com" },
    { name = "Jeremy Zucker", email = "jeremy.zucker@pnnl.gov" },
]
maintainers = [
    { name = "Charles Tapley Hoyt", email = "cthoyt@gmail.com" },
]

# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#classifiers
# Search tags using the controlled vocabulary at https://pypi.org/classifiers
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Framework :: Pytest",
    "Framework :: tox",
    "Framework :: Sphinx",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    # TODO add your topics from the Trove controlled vocabulary (see https://pypi.org/classifiers)
]
keywords = [
    "snekpack",
    "cookiecutter",
    "structural causal modeling",
    "causal artificial intelligence",
    "causal machine learning",
    "causal inference",
    "network science",
]

# License Information. This can be any valid SPDX identifiers that can be resolved
# with URLs like https://spdx.org/licenses/MIT
# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#license
license = { file = "LICENSE" }

requires-python = ">=3.10"
dependencies = [
    "more_itertools", # missing from itertools in stdlib
    "tqdm", # progress bars
    "click",
    "more_click",
    "pyparsing",
    "networkx",
    "tabulate",
    "pandas",
    "scikit-learn",
    "statsmodels",
    "scipy",
]

[project.optional-dependencies]
r = [
    "rpy2",
]
tests = [
    "pytest",
    "coverage",
    "ananke-causal",
    "pgmpy",
]
docs = [
    # waiting on https://github.com/readthedocs/sphinx_rtd_theme/issues/1582
    # to make sphinx 8 possible
    "sphinx<8",
    "sphinx-rtd-theme",
    "sphinx-click",
    "sphinx_automodapi",
    "texext",
]

# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#urls
[project.urls]
"Bug Tracker" = "https://github.com/y0-causal-inference/y0/issues"
Homepage = "https://github.com/y0-causal-inference/y0"
Repository = "https://github.com/y0-causal-inference/y0.git"
Documentation = "https://y0.readthedocs.io"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
# this implicitly sets `packages = ":find"`
where = ["src"]  # list of folders that contain the packages (["."] by default)

# See https://setuptools.pypa.io/en/latest/userguide/datafiles.html
[tool.setuptools.package-data]
"*" = ["*.*"]


[project.scripts]
y0 = "y0.cli:main"


[tool.cruft]
skip = [
    "**/__init__.py",
    "tests/*"
]

# MyPy, see https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
plugins = []

# Doc8, see https://doc8.readthedocs.io/en/stable/readme.html#ini-file-usage
[tool.doc8]
max-line-length = 120

# Pytest, see https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]

# Coverage, see https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
source = [
    "y0",
]
omit = [
    "tests/*",
    "docs/*",
    "src/y0/algorithm/identify/_extras.py",
]

[tool.coverage.paths]
source = [
    "src/y0",
    ".tox/*/lib/python*/site-packages/y0",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
    "if TYPE_CHECKING:",
    "def __str__",
    "def __repr__",
]

[tool.black]
line-length = 100
target-version = [
    "py39",
    "py310",
    "py311",
    "py312",
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
include_trailing_comma = true

[tool.ruff]
line-length = 100
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules
extend-select = [
    "F", # pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "C90", # mccabe
    "I", # isort
    "UP", # pyupgrade
    "D", # pydocstyle
    "B", # bugbear
    "S", # bandit
    "T20", # print
    "N", # pep8 naming
    #"ERA", # eradicate commented out code
    #"NPY", # numpy checks
    "RUF", # ruff rules
    "C4", # comprehensions
]
ignore = [
    "D105", # Missing docstring in magic method
    "E203", # Black conflicts with the following
    "E501",
]

# See https://docs.astral.sh/ruff/settings/#per-file-ignores
[tool.ruff.lint.per-file-ignores]
# Ignore security issues in the version.py, which are inconsistent
"src/y0/version.py" = ["S603", "S607"]
# Ignore commented out code in Sphinx configuration file
"docs/source/conf.py" = ["ERA001"]
# Prints are okay in notebooks
"notebooks/**/*.ipynb" = ["T201", "S101", "N811", "N802", "N803"]
"src/y0/algorithm/separation/sigma_separation.py" = ["RUF002", "RUF003"]
"src/y0/algorithm/separation/__init__.py" = ["RUF002", "RUF003"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.isort]
relative-imports-order = "closest-to-furthest"
known-third-party = [
    "tqdm",
]
known-first-party = [
    "y0",
    "tests",
]
